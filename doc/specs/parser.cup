package compiler.syntax;

// Declaración de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

import compiler.semantic.utils.*;

// Declaración del código de usuario

action code   {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

	// Cadenas 
	List cadenas = new ArrayList();
	// Desplazamiento con RA principal
	int despl=0;

	// Desplazamiento x ambito
	HashMap desplScope = new HashMap(); 

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}


// Declaración de terminales
terminal Token TLTRUE, TLFALSE, TLINT, TLSTRING, TIDENTIFICADOR;
terminal Token TAND, TNOT;
terminal Token TBEGIN, TEND;
terminal Token TIF, TTHEN, TELSE;
terminal Token TMODULE, TPROCEDURE, TRETURN;
terminal Token TDO, TWHILE;
terminal Token TWRITESTRING, TWRITEINT, TWRITELN;
terminal Token TBOOLEAN, TCONST, TINTEGER, TRECORD, TTYPE, TVAR;
terminal Token TPTOCOMA, TPARI, TPARD, TCOMA, TDOSPTS, TIGUAL;
terminal Token TSUMA, TDIVIDE, TASSIGN, TMENOR, TDISTINTO, TPUNTO;

// Declaración de no terminales
non terminal  		    program;
non terminal Axiom		axiom;

non terminal                 ctes;
non terminal            ctesLista;
non terminal              Cte cte;
non terminal       Token cteValor;
non terminal          Lista tipos;
non terminal     Lista tiposLista;
non terminal      TypeRecord tipo;
non terminal       Lista registro;
non terminal      Lista regCampos;
non terminal CampoRegistro regCampo;
non terminal                 vars;
non terminal            varsLista;
non terminal                  var;
non terminal        String varTipo;
non terminal                 subs;
non terminal             SubDecl subDecl;
non terminal      Lista subParams;
non terminal Lista subParamsCuerpo;
non terminal         Lista subPar;
non terminal     String subReturn;
non terminal        BloqueSentencias   sentencias;
non terminal       BloqueSentencias          sent;
non terminal      BloqueSentencias      sentAsign;
non terminal      BloqueSentencias         sentES;
non terminal    BloqueSentencias       sentReturn;
non terminal    BloqueSentencias         sentCall;
non terminal   BloqueSentencias    sentCallParams;
non terminal    BloqueSentencias           sentIf;
non terminal       BloqueSentencias      sentElse;
non terminal         BloqueSentencias   sentWhile;
non terminal  Expresion expresion;
non terminal String tipoPrimitivo;
non terminal        BloqueSentencias cuerpoModulo;
non terminal         BloqueSentencias finalModulo;
non terminal    Lista varSeqDeIds;
non terminal            ntPtoComa;

// Declaración de relaciones de precedencia (de menos a más)
precedence nonassoc TMENOR, TDISTINTO;
precedence left     TSUMA;
precedence left     TDIVIDE, TAND;
precedence right    TNOT;
precedence left     TPUNTO, TPARI, TPARD;

// Declaración de reglas de producción
// El proceso de análisis ha de empezar emitiendo el mensaje 'Starting parsing...' y
// finalizar emitiendo el mensaje 'Parsing process finished' en el caso de no existir 
// ningún error no recuperable.

start with program;

program ::= 
  {: syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
	
	
  :}
  axiom:ax
  {: 
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		List intermediateCode = ax.getIntermediateCode ();
        finalCodeFactory.setEnvironment(CompilerContext.getExecutionEnvironment());
  		finalCodeFactory.create(intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
  :};


axiom ::= TMODULE TIDENTIFICADOR:id ntPtoComa {: 
            String programName = id.getLexema();
            scopeManager.openScope(programName); 
  		
            ScopeIF scope = scopeManager.getCurrentScope();

			TypeTableIF tablaTipos = scope.getTypeTable();

            // aniadimos los tipos simples
            TypeSimple tipoBooleano = new TypeSimple(scope);
            tipoBooleano.setName("BOOLEAN");
			tablaTipos.addType(tipoBooleano);

			TypeSimple tipoEntero = new TypeSimple(scope);
            tipoEntero.setName("INTEGER");
            tablaTipos.addType(tipoEntero);
            
        :} cuerpoModulo:bloque {:
            ScopeIF scope = scopeManager.getCurrentScope();

            Axiom ax = new Ax();

            for (TemporalIF temp:scope.getTemporalTable().getTemporals()) {
                if (temp instanceof Temporal) {
                    ((Temporal) temp).setAddress(despl);
                    despl = despl + 1;
                }
            }

            int bloqueMainRA = 2;

            int tam;
            tam = scope.getSymbolTable().getSize() + scope.getTemporalTable().getSize() + bloqueMainRA;
            // TemporalIF temp = ax.getTemporal();

            IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);
            cb.addQuadruple("INICIO_PROGRAMA", null, tam);
            cb.addQuadruples(bloque.getIntermediateCode());            
            cb.addQuadruple("FIN_PROGRAMA", null);

            // anyadimos todas las cadena al final del programa
            int i=1;
            cb.addQuadruple ("CADENA", "cadena0","\"\\n\"", "");
            for (Iterator it = cadenas.iterator(); it.hasNext();i++){
                String nombre="cadena"+i;
                cb.addQuadruple ("CADENA", nombre,it.next(), "");
            }

            List intermediateCode = cb.create();


            //IMPRIMIMOS CODIGO INTERMEDIO
            syntaxErrorManager.syntaxInfo("********************************************");
            syntaxErrorManager.syntaxInfo("**           CODIGO INTERMEDIO            **");
            syntaxErrorManager.syntaxInfo("********************************************");

            Iterator it = intermediateCode.iterator();
            while (it.hasNext()){
                syntaxErrorManager.syntaxInfo("** " + it.next().toString());
            }


            ax.setIntermediateCode(intermediateCode);

            RESULT = ax;

            //falta
        :}
        | TMODULE error {:syntaxErrorManager.syntaxFatalError("001. No se ha especificado nombre al programa");:}
            
    ;

//
// DEFINICIÓN DE CONSTANTES
//
ctes ::= TCONST {: 
            ScopeIF scope = scopeManager.getCurrentScope();

            semanticErrorManager.semanticDebug("Analizando las constantes del ambito " + scope.getName());

        :} ctesLista  
        | /*nada*/ ;

ctesLista ::= cte ctesLista | cte;

cte ::= TIDENTIFICADOR:id TIGUAL cteValor:value {: 
            String identificador = id.getLexema();
            int val;

            if(value.getLexema().equals("TRUE")) {
                val = 0;
            } else if (value.getLexema().equals("FALSE")) {
                val = 1;
            } else { // integer
                val = Integer.parseInt(value.getLexema());
            }
            
            String line = String.valueOf(value.getLine());
            String column = String.valueOf(value.getColumn());

            String typeOfValue = Utilidades.getTypeOfValue(value.getLexema());

            if (typeOfValue.equals("noValidType")) {
                semanticErrorManager.semanticFatalError("La constante " + identificador + " no tiene un tipo valido");
            }

            TypeIF type = scopeManager.searchType(typeOfValue);

            Cte constante = new Cte(identificador, type, val, line, column);

            ScopeIF scope = scopeManager.getCurrentScope();
            SymbolTableIF tablaSimbolos = scope.getSymbolTable();

            // guardamos el simbolo en la tabla y comprobamos que no existe otro con el mismo nombre
            if (!tablaSimbolos.containsSymbol(constante.getName()) ){		
                semanticErrorManager.semanticDebug("Aniadiendo la constantes " + constante.getName() + " a la tabla de simbolos");

                SymbolConstant simboloVar = new SymbolConstant(scope, constante.getName(), type);
                tablaSimbolos.addSymbol(constante.getName(), simboloVar);                                       	
            } else {
                semanticErrorManager.semanticFatalError ("210. La constante: " + constante.getName() +" en [" + constante.getLine() + ":" + constante.getColumn() + "] ya ha sido definida.");
            }

            RESULT = constante;
        :} ntPtoComa

    | error
            
    ;
cteValor ::= TLTRUE:bool {: RESULT=bool; :}      
            | TLFALSE:bool {: RESULT=bool; :} 
            | TLINT:entero {: RESULT=entero; :} 
    ;

//
// DEFINICIÓN DE TIPOS
//
tipos ::= TTYPE {:
            ScopeIF scope = scopeManager.getCurrentScope();

            semanticErrorManager.semanticDebug("Analizando los tipos del ambito " + scope.getName());

        :} tiposLista 
        | /*nada*/
	;

tiposLista ::= tipo:tipo tiposLista:lista /* {:
            lista.add(tipo);
            RESULT = lista;
        :}    */
        | /* tipo:tipo {:
            Lista lista = new Lista();
            lista.add(tipo);
            RESULT = lista;
        :} */
	;

tipo ::= TIDENTIFICADOR:id TIGUAL registro:lista {:
            String identificador = id.getLexema();

            ScopeIF scope = scopeManager.getCurrentScope();
			TypeTableIF tablaTipos = scope.getTypeTable();

            //creamos un nuevo tipo registro
            TypeRecord tipoRegistro = new TypeRecord(scope, identificador);
            
            HashMap<String, CampoRegistro> campos = tipoRegistro.getTablaCampos();

            for(int i = 0; i < lista.size(); i++) {
                CampoRegistro campo = (CampoRegistro) lista.get(i);
                
                campos.put(campo.getName(), campo);
            }

            if (!scopeManager.containsType(identificador)) {
                semanticErrorManager.semanticDebug("Aniadiendo a la tabla de tipos el tipo " + identificador);

                tablaTipos.addType(tipoRegistro);
            } else {
                semanticErrorManager.semanticFatalError ("210. El tipo: " + identificador + " en [" + id.getLine() + ":" + id.getColumn() + "] ya ha sido definida.");
            }

            RESULT = tipoRegistro; //dado que el grupo A solo tiene los registros como tipos para crear todo tipo compuesto sera un registro

        :} ntPtoComa
        | error
            
    ;

registro ::= TRECORD regCampos:lista {: RESULT = lista; :} TEND
            
        | error
            
    ;
regCampos ::= regCampo:reg regCampos:lista {:
                lista.add(reg);
                RESULT = lista;
            :}
            
        | regCampo:reg {:
            Lista lista = new Lista();
            lista.add(reg);
            RESULT = lista;
        :}
            
    ;
regCampo ::= TIDENTIFICADOR:id TDOSPTS tipoPrimitivo:tipo {:
            String identificador = id.getLexema();
            TypeIF tipoPrimitivo = scopeManager.searchType(tipo);

            if(!tipo.equals("BOOLEAN") && !tipo.equals("INTEGER")) {
                semanticErrorManager.semanticFatalError ("210. El tipo en el registro : " + identificador + "[" + id.getLine() + ":" + id.getColumn() + "] no es bool o int.");
            }

            CampoRegistro reg = new CampoRegistro(identificador, tipoPrimitivo);

            RESULT = reg;
        :} ntPtoComa
            
        | error
            
    ;

//
// DEFINICIÓN DE VARIABLES
//
vars ::= TVAR {:
            ScopeIF scope = scopeManager.getCurrentScope();

            semanticErrorManager.semanticDebug("Analizando las variables del ambito " + scope.getName());

        :} varsLista 
        | /*Nada*/          
    ;

varsLista ::= var varsLista
            | var        
    ;

var ::= varSeqDeIds:lista TDOSPTS varTipo:tipo {:
            ScopeIF scope = scopeManager.getCurrentScope();
            TypeTableIF tablaTipos = scope.getTypeTable();
            SymbolTableIF tablaSimbolos = scope.getSymbolTable();
        
            if (!tablaTipos.containsType(tipo)) {
                semanticErrorManager.semanticFatalError("el tipo " + tipo + " no ha sido declarado");
            }

            for(int i = 0; i < lista.size(); i++) {
                Var v = (Var) lista.get(i);

                String name = v.getName();

                despl++;

                // comprobamos que la variable no ha sido declarada anteriormente y la guardamos en la tabla de simbolos
                if (!scope.getSymbolTable().containsSymbol(name) ){		
                    semanticErrorManager.semanticDebug("Anadiendo la variable " + name + " a la tabla de simbolos");
                    
                    SymbolVariable simboloVar = new SymbolVariable(scope, name, scopeManager.searchType(tipo), despl);
                    tablaSimbolos.addSymbol(name, simboloVar);                                       	
                } else {
                    semanticErrorManager.semanticFatalError ("210. La variable: " + name + " en [" + v.getLine() + ":" + v.getColumn() + "] ya ha sido definida.");
                }
            }

            RESULT = lista;

        :} ntPtoComa
            
        | error
            
    ;
varTipo ::= tipoPrimitivo:tip {: RESULT = tip; :} 
            | TIDENTIFICADOR:tipo {: RESULT = tipo.getLexema(); :}
        ;

//
// DEFINICIÓN DE SUBPROGRAMAS
//
subs ::= subs TPROCEDURE {:
            ScopeIF scope = scopeManager.getCurrentScope();

            semanticErrorManager.semanticDebug("Analizando los subprogramas del ambito " + scope.getName());

        :} subDecl:subDecl cuerpoModulo:bloque {:
            if((subDecl.getEsFuncion() && !bloque.getTieneDevuelve()) || (!subDecl.getEsFuncion() && bloque.getTieneDevuelve())) {
                semanticErrorManager.semanticFatalError("Esto no es una funcion. O falta el devuelve o no hay indicado el tipo del retorno");
            }

            RESULT = bloque;
        :}
        | //Nada
    ;

subDecl ::= TIDENTIFICADOR:identificador subParams:lista subReturn:tipo {:
                String nombreFuncion = identificador.getLexema();

                if (scopeManager.containsSymbol(nombreFuncion)) {
				    semanticErrorManager.semanticFatalError("350. La funcion "+identificador.getLexema()+" en la linea: "+identificador.getLine()+" ya ha sido declarada");
                } else {     
                    // Crear FUNCION en ambito
                    ScopeIF scope = scopeManager.getCurrentScope();
                    TypeTableIF tablaTipos = scope.getTypeTable();
                    SymbolTableIF tablaSimbolos = scope.getSymbolTable();

                    // a�adir funcion a TT
                    TypeFunction tipoFuncion = new TypeFunction(scope, nombreFuncion);
                    tablaTipos.addType(nombreFuncion, tipoFuncion);
                                
                    // aniadir funcion a TS
                    SymbolFunction simboloFunc = new SymbolFunction(scope, nombreFuncion, tablaTipos.getType(nombreFuncion));
                    semanticErrorManager.semanticDebug("Aniadiendo el subprograma " + nombreFuncion + " a la tabla de simbolos");
                    tablaSimbolos.addSymbol(nombreFuncion, simboloFunc);

                    SubDecl declaracion;

                    ///////////////////////////////
                    // NUEVO ambito para ser usado dentro funcion y tabla TS y TT
				    scopeManager.openScope(nombreFuncion); 

                    tablaTipos = scopeManager.getCurrentScope().getTypeTable();
				    tablaSimbolos = scopeManager.getCurrentScope().getSymbolTable();

                    if(tipo.equals("noType")) {  // el subprograma es un procedimiento
                        declaracion = new SubDecl(false);
                        tipoFuncion.setTipoRetorno(null);
                    } else {                     // es una funcion
                        declaracion = new SubDecl(true);
                        tipoFuncion.setTipoRetorno(scopeManager.searchType(tipo));  
                    }
                    
    				ArrayList parametros = new ArrayList(Utilidades.ordenaParametros(lista));

                    for (int i = 0; i < parametros.size(); i++) {
                        Parametro p = (Parametro) parametros.get(i);
                          
                        p.setReferencia(true); // en el tipo son todos por referencia

                        SymbolVariable simboloVar = new SymbolVariable (scopeManager.getCurrentScope(), p.getNombre(), p.getTipo());//, despl);
                        // despl++;
                        
                        // Creo lista ordenada de parametros en el PROCEDIMIENTO.
                        tipoFuncion.setTypeParametro(p.getColumna(), p.getTipo()); 

                        // Fijar paso parametros Ref/Valor en Symbolvar
                        simboloVar.setReferencia(p.getReferencia());
                        tablaSimbolos.addSymbol(p.getNombre(), simboloVar);                                  	
                        tipoFuncion.setParametro(simboloVar);
                    }

                    //////////////////
                    //cerramos ambito
                    scopeManager.closeScope();

                    RESULT = declaracion;
                }
            :} ntPtoComa
            
        | error
            
    ;
subParams ::= TPARI TPARD {: 
                RESULT = new Lista(); 
            :}      
            | TPARI subParamsCuerpo:lista {: 
                RESULT = lista; 
            :} TPARD    
            | /*nada*/ {: 
                RESULT = new Lista(); 
            :}                         
        ;

subParamsCuerpo ::= subPar:listaParametros ntPtoComa subParamsCuerpo:lista {: 
                        for (int i = 0; i < listaParametros.size(); i++) {
                            lista.add(listaParametros.get(i));
                        }
                        
                        RESULT = lista;
                    :}
            
                | subPar:listaParametros {:
                    RESULT = listaParametros;
                 :}
            
    ;

subPar ::= TVAR varSeqDeIds:lista TDOSPTS varTipo:tipo {:
            Lista list = (Lista) lista;

            Lista listaParametros = new Lista();

            for (int i = 0; i < list.size(); i++) {
                Var v = (Var) list.get(i);

                String name = v.getName();

                Parametro parametro = new Parametro();

                TypeIF tip = scopeManager.searchType(tipo);

                parametro.setNombre(name);
                parametro.setTipo(tip);
                parametro.setColumna(v.getColumn());

                listaParametros.add(parametro);
            }

            RESULT = listaParametros;

        :}
            
        | error
            
    ;
subReturn ::= TDOSPTS:s tipoPrimitivo:tipo {: RESULT = tipo; :}
            | {: RESULT = "noType"; :} //Nada 
            | error
    ;

//
// DEFINICIÓN DE SENTENCIAS
//

    // las sentencias devuelven bloques de sentencias que contienen el código intermedio

sentencias ::= sent:sent ntPtoComa sentencias:blq {:
                    BloqueSentencias bloque = new BloqueSentencias();

                    // si alguno de los bloques 
                    if (blq.getTieneDevuelve() || sent.getTieneDevuelve()) {
                        bloque.setTieneDevuelve(true);
                    }

                    IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder (scopeManager.getCurrentScope());
                    cb.addQuadruples(sent.getIntermediateCode());
                    cb.addQuadruples(blq.getIntermediateCode());
                    List code = cb.create();
                    bloque.setIntermediateCode(code);
				
                	RESULT=bloque;
                :}
                    
                | /*Nada*/ {:
            BloqueSentencias bloque = new BloqueSentencias();
            RESULT = bloque;

:}
                    
                | error
            
    ;
sent ::= sentAsign:sent {: RESULT = sent; :}          //LISTO
        | sentES:sent {: RESULT = sent; :}             //LISTO
        | sentReturn:sent {: RESULT = sent; :}   
        | sentIf:sent {: RESULT = sent; :} TEND       // LISTO?
        | sentWhile:sent {: RESULT = sent; :} TEND    
        | sentCall:sent {: RESULT = sent; :}   
        | error
    ;

sentAsign ::= TIDENTIFICADOR:id TASSIGN expresion:exp {:  //compobamos que está ya declarada, que no es una constante, que si es una función el tipo de retorno es igual al tipo de asignacion
                String identificador = id.getLexema();
                ScopeIF scope = scopeManager.getCurrentScope();

                BloqueSentencias bloque = new BloqueSentencias();

                IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope); 

                if (!(scopeManager.containsSymbol(identificador))) {
                    semanticErrorManager.semanticFatalError ("La variable: " + identificador +" en [" +  id.getLine() + ":" + id.getColumn() + "] no ha sido definida.");
                } else {
                    SymbolIF simbolo = scopeManager.searchSymbol(identificador);
                    TypeIF tipo = simbolo.getType();

                    // Comprobamos que no es una constante
                    if (simbolo instanceof SymbolConstant) {
                        semanticErrorManager.semanticFatalError ("La constante: " + id.getLexema() +" en [" +  id.getLine() + ":" + id.getColumn() + "] no admite asignaciones.");
                    } else {
                        if(!tipo.getName().equals(exp.getTipo().getName())){
                            semanticErrorManager.semanticFatalError("Los tipos de la asignación no cuadran");
                        } else {
                            // TemporalFactoryIF tF = new TemporalFactory(scope); 
                            // TemporalIF temp = tF.create();
                            // TemporalIF eTemp = exp.getTemporal(); 
                            // cb.addQuadruples(exp.getIntermediateCode());
                            // SymbolIF sV = scopeManager.searchSymbol(id.getLexema());
                            // Variable var = new Variable(id.getLexema(), sV.getScope()); 
                            // cb.addQuadruple("MVA", temp, var);
                            // cb.addQuadruple("STP", temp, eTemp); 
                            // bloque.setIntermediateCode(cb.create());

                            // Creamos codigo para la sentencia 
                            Variable var = new Variable(id.getLexema(), scope);
                            var.setAmbito(simbolo.getScope());
                            List code1 = exp.getIntermediateCode();
                            cb.addQuadruples(code1);
                            cb.addQuadruple("ASIG", var, exp.getResultado());   

                            bloque.setIntermediateCode(cb.create());
                        }
                    }
                    
                    // else if (tipo instanceof TypeRecord) {
                    //     if ( !(tipo.getName() == exp.getTipo().getName()) ){       
                    //         semanticErrorManager.semanticFatalError ("284. La Asignacion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no coincide en tipos.");             
                    //     } else {
                            
                    //     }
                    // }

                }
                
                RESULT=bloque;
            :}   

            | TIDENTIFICADOR:id TPUNTO TIDENTIFICADOR:campo TASSIGN expresion:exp {: // asignación de registros
                String identificador = id.getLexema();

                BloqueSentencias bloque = new BloqueSentencias();


                // ScopeIF scope = scopeManager.getCurrentScope();
                // SymbolTableIF tablaSimbolos = scope.getSymbolTable();

                // if(!tablaSimbolos.containsSymbol(identificador + campo.getLexema())) {
                //     semanticErrorManager.semanticFatalError("No se encuentra el simbolo");
                // } else {
                //     TemporalFactoryIF tF = new TemporalFactory(scope); 
                //     IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope); 

                //     TemporalIF temp = tF.create();
                //     TemporalIF eTemp = exp.getTemporal(); 
                //     cb.addQuadruples(exp.getIntermediateCode());
                //     SymbolIF sV = scopeManager.searchSymbol(id.getLexema());
                //     Variable var = new Variable(id.getLexema(), sV.getScope()); 
                //     cb.addQuadruple("MVA", temp, var);
                //     cb.addQuadruple("STP", temp, eTemp); 
                //     bloque.setIntermediateCode(cb.create());
                // }



                RESULT = bloque;
            :}
    ;

sentWhile ::= TWHILE expresion TDO sentencias {:
                BloqueSentencias bloque = new BloqueSentencias();

                RESULT = bloque;
            :}
;

sentIf ::= TIF:id expresion:exp TTHEN sentencias:sent1 sentElse:sent2 {:
            // System.out.println(e.getTipo());

            // BloqueSentencias bloque = new BloqueSentencias();
            // ScopeIF scope = scopeManager.getCurrentScope();

            // if ( !(e.getTipo().getName().equals("BOOLEAN")) ) {
            //     semanticErrorManager.semanticFatalError ("328. La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es LOGICA.");
            // } else {
            //     LabelFactory lF= new LabelFactory(scope.getName());
            //     LabelIF l1 = lF.create();
            //     LabelIF l2 = lF.create();
            //     TemporalIF expTemp = e.getTemporal();
            //     IntermediateCodeBuilder cb= new IntermediateCodeBuilder(scope);
            //     cb.addQuadruples(e.getIntermediateCode());
            //     cb.addQuadruple("BRF", expTemp ,l1);
            //     cb.addQuadruples(s1.getIntermediateCode());
            //     cb.addQuadruple("BR", l2);
            //     cb.addQuadruple("INL", l1); 
            //     cb.addQuadruples(s2.getIntermediateCode());
            //     cb.addQuadruple("INL", l2);
            //     bloque.setIntermediateCode(cb.create());
            // }

            // RESULT = bloque;

            if ( !(exp.getTipo().getName().equals("BOOLEAN")) ) {
                                semanticErrorManager.semanticFatalError ("330. La expresion: " + id.getLexema() +" en [" + 
									id.getLine() + ":" + id.getColumn() + "] no es LOGICA.");
            }
                                BloqueSentencias bloque = new BloqueSentencias();
				ScopeIF scope = scopeManager.getCurrentScope();
				IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);

				// LabelFactoryIF lf = CompilerContext.getLabelFactory();
                                LabelFactory lf= new LabelFactory(scope.getName());

				LabelIF LTRUE = lf.create();
				LabelIF LFALSE = lf.create();
                                cb.addQuadruples(exp.getIntermediateCode());
                                cb.addQuadruple("CMP", exp.getResultado(), new Value(1));
				cb.addQuadruple("BNZ",LFALSE);   // Salto no cero
				cb.addQuadruples(sent1.getIntermediateCode());
				cb.addQuadruple("BR",LTRUE);  // Salto incondicional
				cb.addQuadruple("ETIQUETA", LFALSE);
				cb.addQuadruples(sent2.getIntermediateCode());
				cb.addQuadruple("ETIQUETA", LTRUE);
                                cb.addQuadruple("NOP", null);
                                List code = cb.create();
                                bloque.setIntermediateCode(code);
                                RESULT=bloque;

        :};

sentElse ::= TELSE sentencias:sent {:
            // BloqueSentencias bloque = new BloqueSentencias();
            RESULT = sent;
        :}
            
        | /*Nada */ {:
            BloqueSentencias bloque = new BloqueSentencias();
            RESULT = bloque;

:}
            
    ;
sentES ::= TWRITESTRING:id TPARI TLSTRING:cad TPARD {:
            BloqueSentencias bloqueSentencias = new BloqueSentencias ();
            bloqueSentencias.setTieneDevuelve(false);
            IntermediateCodeBuilder cb = new IntermediateCodeBuilder (scopeManager.getCurrentScope());

            				cadenas.add(cad.getLexema());

				cb.addQuadruple("WRSTR","cadena"+cadenas.size());
            bloqueSentencias.setIntermediateCode(cb.create());
            RESULT = bloqueSentencias;
:}

        | TWRITEINT:id TPARI expresion:exp TPARD  {:
            if (exp.getTipo()!=null){
                if (!exp.getTipo().getName().toString().equals("INTEGER")){
                    semanticErrorManager.semanticFatalError ("Una sentencia escribeEnt [" + id.getLine() + ":" + id.getColumn() + "] solo puede recibir variable o constante de tipo entero.");
                } else {
                    BloqueSentencias bloqueSentencias = new BloqueSentencias ();
                    IntermediateCodeBuilder cb = new IntermediateCodeBuilder (scopeManager.getCurrentScope());
                    cb.addQuadruples(exp.getIntermediateCode());
                                cb.addQuadruple("WRINT", exp.getResultado());
                    bloqueSentencias.setIntermediateCode(cb.create());
                    bloqueSentencias.setTieneDevuelve(false);
                    RESULT = bloqueSentencias;
                }
            }
:}
        | TWRITELN {:
            BloqueSentencias bloqueSentencias = new BloqueSentencias ();
            bloqueSentencias.setTieneDevuelve(false);
            IntermediateCodeBuilder cb = new IntermediateCodeBuilder (scopeManager.getCurrentScope());
            cb.addQuadruple("ESCRIBESAL", null);
            bloqueSentencias.setIntermediateCode(cb.create());
            RESULT = bloqueSentencias;
:}                          
    ;

sentReturn ::= TRETURN expresion {:
            System.out.println("encontrada una sentencia de retorno");
            BloqueSentencias bloque = new BloqueSentencias();

            bloque.setTieneDevuelve(true);

            RESULT = bloque;
        :}
            
    ;

sentCall ::= TIDENTIFICADOR TPARI sentCallParams TPARD {:
            BloqueSentencias bloque = new BloqueSentencias();
            RESULT = bloque;

:}
        | TIDENTIFICADOR {:
            BloqueSentencias bloque = new BloqueSentencias();
            RESULT = bloque;

:}                           
    ;
sentCallParams ::= TIDENTIFICADOR {:
            BloqueSentencias bloque = new BloqueSentencias();
            RESULT = bloque;

:}
            
        | TIDENTIFICADOR TCOMA sentCallParams {:
            BloqueSentencias bloque = new BloqueSentencias();
            RESULT = bloque;

:}
            
        | TIDENTIFICADOR TPUNTO TIDENTIFICADOR {:
            BloqueSentencias bloque = new BloqueSentencias();
            RESULT = bloque;

:}
            
        | TIDENTIFICADOR TPUNTO TIDENTIFICADOR TCOMA sentCallParams {:
            BloqueSentencias bloque = new BloqueSentencias();
            RESULT = bloque;

:}
            
        | /*Nada*/ {:
            BloqueSentencias bloque = new BloqueSentencias();
            RESULT = bloque;

:}
            
        | error
            
    ;

expresion::=
        TNOT:id expresion:exp {:
            Expresion expresion = new Expresion (scopeManager.searchType("INTEGER"), id.getLine(), id.getColumn());

            if (exp.getTipo()!=null){
                if (!exp.getTipo().getName().toString().equals("INTEGER")){
                    semanticErrorManager.semanticFatalError ("1 Una expresi�n l�gica debe usar tipos enteros con el operador: " + id.getLexema() + " [" + id.getLine() + ":" + id.getColumn() + "].");
                } else {
                    ScopeIF scope = scopeManager.getCurrentScope();
                    TemporalFactory tf = new TemporalFactory (scope);
                    // Integer numTemporal=scopeManager.getCurrentScope().getTemporalTable().getTemporals().size();
                    // Integer posTemp=numTemporal+despl;
                    
                    LabelFactory labelFactory = new LabelFactory(scope.getName());

                    TemporalIF t = tf.create();
                    // t.setDesplazamiento(posTemp);
                    LabelIF lTrue = labelFactory.create ("TRUE");
                    LabelIF lFalse = labelFactory.create ("FALSE");
                    IntermediateCodeBuilder cb = new IntermediateCodeBuilder (scope);
                    cb.addQuadruples (exp.getIntermediateCode());
                    
                    //Cortocircuito, if a then b else false
                    Value Verdadero = new Value(1);
                    Value Falso = new Value(0);
                    cb.addQuadruple("CMP", Verdadero, exp.getResultado()); //compara
                    cb.addQuadruple("BN",lTrue); //salto negativo
                    cb.addQuadruple("ASIG", t, Falso);
                    cb.addQuadruple("BR",lFalse);//salto incondicional
                    cb.addQuadruple("ETIQUETA",lTrue);
                    cb.addQuadruple("ASIG", t, Verdadero);
                    cb.addQuadruple("ETIQUETA",lFalse);
                    expresion.setIntermediateCode(cb.create());
                    expresion.setResultado(t);
                }
            }

            RESULT = expresion;
        :}

        | TPARI expresion:expresion TPARD {:    //listo
            RESULT = expresion;
        :}

        | expresion:exp1 TDIVIDE:id expresion:exp2 {:/*aritmeticos*/
            if ( !(exp1.getTipo() == exp2.getTipo())  ||  !(exp1.getTipo().getName().equals("INTEGER"))  || !(exp2.getTipo().getName().equals("INTEGER")) )  {
                semanticErrorManager.semanticFatalError ("232. La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
			} else {
                // Expresion exp = new Expresion(scopeManager.searchType("INTEGER"), id.getLine(), id.getColumn());
                // ScopeIF scope = scopeManager.getCurrentScope();

                // TemporalFactory tf = new TemporalFactory(scope); 
                // IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope); 
                // TemporalIF temp1 = exp1.getTemporal();
                // TemporalIF temp2 = exp2.getTemporal();
                // TemporalIF temp = tf.create(); 
                // cb.addQuadruples(exp1.getIntermediateCode()); 
                // cb.addQuadruples(exp2.getIntermediateCode()); 
                // cb.addQuadruple("DIV", temp, temp1, temp2); 
                // exp.setTemporal(temp);
                // exp.setIntermediateCode(cb.create());

                // exp.setTipo(scopeManager.searchType("BOOLEAN"));

                // RESULT = exp;

                Expresion exp = new Expresion(scopeManager.searchType("INTEGER"), id.getLine(), id.getColumn());
                if (exp.castingTipos(exp1 , exp2) ) {
                        semanticErrorManager.semanticFatalError ("222. La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
                }else{
                    ScopeIF scope = scopeManager.getCurrentScope();

                    TemporalFactoryIF tf = new TemporalFactory(scope); 
                    Temporal temporal = (Temporal) tf.create(); 
                    temporal.setDesplazamiento(despl);
                    despl++;
                    IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
                    List code1 = exp1.getIntermediateCode();
                    List code2 = exp2.getIntermediateCode();
                    cb.addQuadruples (code1);
                    cb.addQuadruples (code2);
                
                    cb.addQuadruple ("SUB", temporal, exp1.getResultado(), exp2.getResultado()); // temporal <- exp1 - exp2
                    List code=cb.create ();
                    exp.setResultado (temporal);    
                    exp.setIntermediateCode (code);  
                                            
                    RESULT=exp;
                }
            }
        :}               
        | expresion:exp1 TSUMA:id expresion:exp2 {:
            if ( !(exp1.getTipo() == exp2.getTipo())  ||  !(exp1.getTipo().getName().equals("INTEGER"))  || !(exp2.getTipo().getName().equals("INTEGER")) )  {
                semanticErrorManager.semanticFatalError ("232. La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
			} else {
                /* Expresion exp = new Expresion(scopeManager.searchType("INTEGER"), id.getLine(), id.getColumn());
                ScopeIF scope = scopeManager.getCurrentScope();

                TemporalFactory tf = new TemporalFactory(scope); 
                IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope); 
                TemporalIF temp1 = exp1.getTemporal();
                TemporalIF temp2 = exp2.getTemporal();
                TemporalIF temp = tf.create(); 
                cb.addQuadruples(exp1.getIntermediateCode()); 
                cb.addQuadruples(exp2.getIntermediateCode()); 
                cb.addQuadruple("SUM", temp, temp1, temp2); 
                exp.setTemporal(temp);
                exp.setIntermediateCode(cb.create());

                RESULT = exp; */

                ScopeIF scope = scopeManager.getCurrentScope();
                IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
                Expresion exp = new Expresion(scopeManager.searchType("INTEGER"), id.getLine(), id.getColumn());
                // TemporalFactoryIF tf = CompilerContext.getTemporalFactory(scope);				
                TemporalFactoryIF tf = new TemporalFactory(scope); 

                Temporal temporal = (Temporal) tf.create(); 
                
                // Suma CONJUNTOS
                if (exp1.getTipo().equals(exp2.getTipo()) && exp1.getTipo() instanceof TypeSet) {
                    TypeSet tipoSet = (TypeSet) exp1.getTipo();
                    exp.setTipo(exp1.getTipo());
                    temporal.setDesplazamiento(despl);
                    temporal.setSize(tipoSet.getTamanyo());
                    despl=despl+tipoSet.getTamanyo();
                
                    List code1 = exp1.getIntermediateCode();
                    List code2 = exp2.getIntermediateCode();
                    cb.addQuadruples (code1);
                    cb.addQuadruples (code2);
                    cb.addQuadruple ("UNION_SET", temporal, exp1.getResultado(), exp2.getResultado()); 

                // Suma ENTEROS y/o PUNTEROS  
                } else {
                    if (exp.castingTipos(exp1 , exp2) )
                            semanticErrorManager.semanticFatalError ("224. La expresion: " + id.getLexema() +" en [" + 
                            id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
                    temporal.setDesplazamiento(despl);
                    despl++;
                    List code1 = exp1.getIntermediateCode();
                    List code2 = exp2.getIntermediateCode();
                    cb.addQuadruples (code1);
                    cb.addQuadruples (code2);
                    cb.addQuadruple ("ADD", temporal, exp1.getResultado(), exp2.getResultado()); // temporal <-exp1 + exp2
    
                    
                }
                List code=cb.create ();
                exp.setResultado (temporal); 
                exp.setIntermediateCode (code); 
                RESULT=exp;
            }
        :}                 
        | expresion:exp1 TAND:id expresion:exp2 {:
            if ( !(exp1.getTipo() == exp2.getTipo()) || !(exp1.getTipo().getName().equals("BOOLEAN")) || !(exp2.getTipo().getName().equals("BOOLEAN")) ) {
                semanticErrorManager.semanticFatalError ("228. La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
            } else {
                if (exp1.getTipo()!=null && exp2.getTipo()!=null){
                    if (!exp1.getTipo().getName().toString().equals("INTEGER") || !exp2.getTipo().getName().toString().equals("INTEGER")){
                        semanticErrorManager.semanticFatalError ("2 Una expresi�n l�gica debe usar tipos enteros con el operador: " + id.getLexema() + " [" + id.getLine() + ":" + id.getColumn() + "].");
                    } else {
                        //MEMORIA: Considero l�gica de cortocircuito. Adem�s <=0 es falso, y el resto verdadero.
                        Expresion exp = new Expresion (scopeManager.searchType("INTEGER"), id.getLine(), id.getColumn());
                        ScopeIF scope = scopeManager.getCurrentScope();
                        TemporalFactory tf = new TemporalFactory (scope);
                        LabelFactory labelFactory= new LabelFactory(scope.getName());

                        // Integer numTemporal=scopeManager.getScope().getTemporalTable().getTemporals().size();
                        // Integer posTemp=numTemporal+despl;
                        TemporalIF t = tf.create();
                        // t.setDesplazamiento(posTemp);
                        LabelIF lTrue = labelFactory.create ("TRUE");
                        LabelIF lFalse = labelFactory.create ("FALSE");
                        IntermediateCodeBuilder cb=new IntermediateCodeBuilder (scope);
                        cb.addQuadruples (exp1.getIntermediateCode());
                        cb.addQuadruples (exp2.getIntermediateCode());
                        //Cortocircuito, if a then b else false
                        Value Verdadero=new Value(1);
                        Value Falso=new Value(0);
                        cb.addQuadruple ("CMP", Verdadero, exp1.getResultado()); //compara
                        cb.addQuadruple ("BN",lTrue); //salto negativo
                        cb.addQuadruple ("ASIG", t, exp2.getResultado());
                        cb.addQuadruple ("BR",lFalse);//salto incondicional
                        cb.addQuadruple ("ETIQUETA",lTrue);
                        cb.addQuadruple ("ASIG", t, Falso);
                        cb.addQuadruple ("ETIQUETA",lFalse);
                        exp.setIntermediateCode(cb.create());
                        exp.setResultado(t);

                       exp.setTipo(scopeManager.searchType("BOOLEAN"));

                        RESULT = exp;                            
                    }
                }
            }
        :}    
        | expresion:exp1 TMENOR:id expresion:exp2 {: /*comparaciones*/
            //comprobamos todo tipos y demas
             if ( !(exp1.getTipo() == exp2.getTipo())  ||  !(exp1.getTipo().getName().equals("INTEGER"))  || !(exp2.getTipo().getName().equals("INTEGER")) )  {
                semanticErrorManager.semanticFatalError ("232. La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
			}else{
                // Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
                // ScopeIF scope = scopeManager.getCurrentScope();

                // TemporalFactory tf = new TemporalFactory(scope); 
                // IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope); 
                // TemporalIF temp1 = exp1.getTemporal();
                // TemporalIF temp2 = exp2.getTemporal();
                // TemporalIF temp = tf.create(); 
                // cb.addQuadruples(exp1.getIntermediateCode()); 
                // cb.addQuadruples(exp2.getIntermediateCode()); 
                // cb.addQuadruple("LS", temp, temp1, temp2); 
                // exp.setTemporal(temp);
                // exp.setIntermediateCode(cb.create());

                // exp.setTipo(scopeManager.searchType("BOOLEAN"));

                // RESULT = exp;

                if ( !(exp1.getTipo() == exp2.getTipo())  ||  !(exp1.getTipo().getName().equals("INTEGER"))  || !(exp2.getTipo().getName().equals("INTEGER")) )  {
                                  semanticErrorManager.semanticFatalError ("232. La expresion: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
			     }else{
		      	    Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
				    ScopeIF scope = scopeManager.getCurrentScope();
				//   TemporalFactoryIF tf = CompilerContext.getTemporalFactory(scope);			
                TemporalFactory tf = new TemporalFactory (scope);
	
                Temporal temporal = (Temporal) tf.create(); 
                temporal.setDesplazamiento(despl);
                despl++;
                IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
                List code1 = exp1.getIntermediateCode();
                List code2 = exp2.getIntermediateCode();
                cb.addQuadruples (code1);
                cb.addQuadruples (code2);
                Value verdad = new Value(1);
                Value falso = new Value(0);
                //   LabelFactoryIF lf = CompilerContext.getLabelFactory();	
                LabelFactory lf= new LabelFactory(scope.getName());
				
                LabelIF LTRUE = lf.create();
                LabelIF LFIN = lf.create();				
                // Hacemos cmp al reves para contemplar caso ambos iguales
                cb.addQuadruple ("CMP", exp1.getResultado(), exp2.getResultado()); 
                cb.addQuadruple ("BN", LTRUE); 
                cb.addQuadruple ("ASIG", temporal, falso);
                cb.addQuadruple ("BR", LFIN);
                cb.addQuadruple ("ETIQUETA", LTRUE);
                cb.addQuadruple ("ASIG", temporal, verdad);
                cb.addQuadruple ("ETIQUETA", LFIN);
                                
				  List code=cb.create ();
				  exp.setResultado (temporal); 
				  exp.setIntermediateCode (code); 
						
				  RESULT=exp;
                
                }
            }
        :}                
        | expresion:exp1 TDISTINTO:id expresion:exp2 {:
            //comprobamos todo tipos y demas
             if ( !(exp1.getTipo() == exp2.getTipo())  ||  !(exp1.getTipo().getName().equals("INTEGER"))  || !(exp2.getTipo().getName().equals("INTEGER")) )  {
                semanticErrorManager.semanticFatalError ("232. La expresion: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
			} else {
                if (exp1.getTipo()!=null && exp2.getTipo()!=null){
                    if (!exp1.getTipo().getName().toString().equals("INTEGER") || !exp2.getTipo().getName().toString().equals("INTEGER")){
                        semanticErrorManager.semanticFatalError ("3 Una expresi�n l�gica debe usar tipos enteros con el operador: " + id.getLexema() + " [" + id.getLine() + ":" + id.getColumn() + "].");
                    } else {
                        // Expresion exp = new Expresion (scopeManager.searchType("INTEGER"), id.getLine(), id.getColumn());
                        // ScopeIF scope = scopeManager.getCurrentScope();
                        // TemporalFactory tf = new TemporalFactory (scope);
                        // LabelFactory labelFactory= new LabelFactory(scope.getName());

                        // // Integer numTemporal=scopeManager.getScope().getTemporalTable().getTemporals().size();
                        // // Integer posTemp=numTemporal+despl;
                        // TemporalIF t = tf.create();
                        // // t.setDesplazamiento(posTemp);
                        // TemporalIF tres = tf.create();
                        // // tres.setDesplazamiento(++posTemp);
                        // LabelIF lTrue = labelFactory.create ("TRUE");
                        // LabelIF lFalse = labelFactory.create ("FALSE");
                        // IntermediateCodeBuilder cb=new IntermediateCodeBuilder (scope);
                        // cb.addQuadruples (exp1.getIntermediateCode());
                        // cb.addQuadruples (exp2.getIntermediateCode());
                        // cb.addQuadruple ("CMP", exp2.getResultado(), exp1.getResultado());
                        // cb.addQuadruple ("BNZ", lTrue);
                        // cb.addQuadruple ("ASIG", t, new Value(0));
                        // cb.addQuadruple ("BR", lFalse);
                        // cb.addQuadruple ("ETIQUETA", lTrue);
                        // cb.addQuadruple ("ASIG", t, new Value(1));
                        // cb.addQuadruple ("ETIQUETA", lFalse);
                        // cb.addQuadruple ("ASIG", tres, t);
                        // exp.setIntermediateCode(cb.create());
                        // exp.setResultado(tres);


                        if ( !(exp1.getTipo() == exp2.getTipo()) )
                                  semanticErrorManager.semanticFatalError ("238. La expresion: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no es del mismo tipo.");
                            if ( (exp1.getTipo() instanceof TypeRecord) || exp1.getTipo() instanceof TypeSet )
                                  semanticErrorManager.semanticFatalError ("240. La expresion: " + id.getLexema() +" en [" + 
							id.getLine() + ":" + id.getColumn() + "] no permitida para este tipo.");
                     
                            Expresion exp = new Expresion(scopeManager.searchType("BOOLEAN"), id.getLine(), id.getColumn());
                            ScopeIF scope = scopeManager.getCurrentScope();
                TemporalFactoryIF tf = new TemporalFactory(scope);  //cambiado
                            Temporal temporal = (Temporal) tf.create(); 
                            temporal.setDesplazamiento(despl);
                            despl++;
                            IntermediateCodeBuilderIF cb = new IntermediateCodeBuilder(scope);
                            List code1 = exp1.getIntermediateCode();
                            List code2 = exp2.getIntermediateCode();
                            cb.addQuadruples (code1);
                            cb.addQuadruples (code2);
                            Value verdad = new Value(1);
                            Value falso = new Value(0);
                LabelFactory lf = new LabelFactory(scope.getName()); // lo he cambiado, y en varios TemporalFactory tmb
                            LabelIF LTRUE = lf.create();
                            LabelIF LFIN = lf.create();
                            cb.addQuadruple ("CMP", exp1.getResultado(), exp2.getResultado()); 
                            cb.addQuadruple ("BNZ", LTRUE); 
                            cb.addQuadruple ("ASIG", temporal, falso);
                            cb.addQuadruple ("BR", LFIN);
                            cb.addQuadruple ("ETIQUETA", LTRUE);
                            cb.addQuadruple ("ASIG", temporal, verdad);
                            cb.addQuadruple ("ETIQUETA", LFIN);

                            List code=cb.create ();
                            exp.setResultado (temporal); 
                            exp.setIntermediateCode (code); 
                            
                            exp.setTipo(scopeManager.searchType("BOOLEAN")); //esto es mio!!!

                            RESULT=exp;

                        // RESULT = exp;
                    }
                }
            }
        :}
        | TLINT:num {:          //listo
            // ScopeIF scope = scopeManager.getCurrentScope();
            // Expresion exp = new Expresion(scopeManager.searchType("INTEGER"), integer.getLine(), integer.getColumn());
            // Value resultado = new Value(Integer.parseInt(integer.getLexema()));
            // exp.setResultado(resultado);  // Guardamos el valor operador
                        
            // TemporalFactory tf = new TemporalFactory(scope); IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope); TemporalIF temp = tf.create();
            // int value;
            // value = Integer.parseInt(integer.getLexema());
            // cb.addQuadruple("MV", temp, value);
            // exp.setTemporal(temp);
            // exp.setIntermediateCode(cb.create());

            // RESULT = exp;

            ScopeIF scope = scopeManager.getCurrentScope();
            Expresion exp = new Expresion(scopeManager.searchType("INTEGER"), num.getLine(), num.getColumn());
            Value resultado=new Value(Integer.parseInt(num.getLexema()));
            exp.setResultado(resultado);  // Guardamos el valor operador
            RESULT = exp;
        :}                                      /*tipos primitivos*/
        | TLTRUE:trueValue {:       //listo
            ScopeIF scope = scopeManager.getCurrentScope();
            Expresion expresion = new Expresion(scopeManager.searchType("BOOLEAN"), trueValue.getLine(), trueValue.getColumn());
            
            // Le damos el valor true=1 y false=0
            Value resultado = new Value(1);
            expresion.setTipo(scopeManager.searchType("BOOLEAN"));
            expresion.setResultado(resultado);

            RESULT = expresion;
        :}
        | TLFALSE:falseValue {:     //listo
            ScopeIF scope = scopeManager.getCurrentScope();
            Expresion expresion = new Expresion(scopeManager.searchType("BOOLEAN"), falseValue.getLine(), falseValue.getColumn());
            
            // Le damos el valor true=1 y false=0
            Value resultado = new Value(0);
            expresion.setTipo(scopeManager.searchType("BOOLEAN"));
            expresion.setResultado(resultado);
        :}
        | TIDENTIFICADOR:id {:  //esto debería estar terminado asi
            ScopeIF scope = scopeManager.getCurrentScope();
            SymbolTableIF tablaSimbolos = scope.getSymbolTable();
            TypeTableIF tablaTipos = scope.getTypeTable();
            
            if (!(scopeManager.containsSymbol(id.getLexema()))) {
                semanticErrorManager.semanticFatalError ("242. La variable: " + id.getLexema() +" en [" + id.getLine() + ":" + id.getColumn() + "] no ha sido definida.");
            } else {
                SymbolIF simbolo = scopeManager.searchSymbol(id.getLexema());
                Expresion exp = new Expresion(simbolo.getType(), id.getLine(), id.getColumn());
                
                if (simbolo instanceof SymbolConstant) {
					SymbolConstant simboloCte = (SymbolConstant) simbolo;
					Value valor = new Value(simboloCte.getValue());
                    exp.setResultado(valor);
                } else {
                    Variable var = new Variable(id.getLexema(), scope);
                    var.setAmbito(simbolo.getScope());
                    exp.setReferencia(true);
                    exp.setResultado(var);
                }
                RESULT = exp;
            }
        :}                             /*variable o constante*/
        | TIDENTIFICADOR:id1 TPUNTO TIDENTIFICADOR:id2        /*registro*/  {:
            if ( !(scopeManager.containsSymbol(id1.getLexema())) ) {
                semanticErrorManager.semanticFatalError ("El tipo registro: " + id1.getLexema() +" en [" + id1.getLine() + ":" + id1.getColumn() + "] no ha sido definida.");
            }

            ScopeIF scope = scopeManager.getCurrentScope();
            SymbolIF simbolo = scopeManager.searchSymbol(id1.getLexema());
            TypeRecord tipoRecord = (TypeRecord) scopeManager.searchType(simbolo.getType().getName());

            // El campo existe en el registro id1
            if (! tipoRecord.containsCampo(id2.getLexema() )) {
                semanticErrorManager.semanticFatalError ("El campo registro: " + id2.getLexema() +" en [" + id2.getLine() + ":" + id2.getColumn() + "] no ha sido definida.");
            }

            Expresion e = new Expresion(tipoRecord.getTypeCampo(id2.getLexema()), id2.getLine(), id2.getColumn());
            HashMap tablaCampos = tipoRecord.getTablaCampos();
            SymbolVariable simboloCampo = (SymbolVariable) tablaCampos.get(id2.getLexema()); 
            //Obtener la posición que ocupa el campo id2 dentro del registro id1
            
            //Código intermedio
            TemporalFactory tF = new TemporalFactory(scope);
            IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope); 
            TemporalIF temp = tF.create();
            TemporalIF temp1 = tF.create();
            TemporalIF temp2 = tF.create();
            TemporalIF temp3 = tF.create();
            SymbolIF sV = scopeManager.searchSymbol(id1.getLexema());
            Variable var = new Variable(id1.getLexema(), sV.getScope()); 
            
            cb.addQuadruple("MVA", temp1, var); //dirección base de la variable 
            cb.addQuadruple("MV", temp2, 1); //desplazamiento
            cb.addQuadruple("ADD", temp3, temp1, temp2);
            cb.addQuadruple("MVP", temp, temp3);
            e.setTemporal(temp);
            e.setIntermediateCode (cb.create());

            RESULT = e;
        :}

        | TIDENTIFICADOR TPARI sentCallParams TPARD  /*invocacion*/      {:

        :}                                  
        | error   
    ;

//
// Reglas auxiliares
//
tipoPrimitivo ::= TINTEGER:integer {: RESULT = "INTEGER"; :}     
                | TBOOLEAN:bool {: RESULT = "BOOLEAN"; :}
    ;
varSeqDeIds ::= TIDENTIFICADOR:id {: 
                    String varName = id.getLexema();

                    Var var = new Var();

                    var.setName(varName);
                    var.setColumn(id.getColumn());
                    Lista lista = new Lista();

                    lista.add(var);

                    RESULT = lista;
                :}
                    
                | TIDENTIFICADOR:id TCOMA varSeqDeIds:list {:
                    Lista lista = new Lista();

                    for(int i=0; i < list.size(); i++) {
                        lista.add(list.get(i));
                    }

                    String varName = id.getLexema();

                    Var var = new Var();
                    var.setName(varName);

                    lista.add(var);

                    RESULT = lista;
                :}
    ;

cuerpoModulo ::= ctes tipos vars subs TBEGIN finalModulo:bloque {:
            RESULT = bloque;
        :}

        | error
            
    ;
finalModulo ::= sentencias:bloque TEND TIDENTIFICADOR {:
                    RESULT = bloque;
                :} ntPtoComa 
        | error
            
    ;
ntPtoComa ::= //Varios ';' seguidos deben ser interpretados como uno solo.        
        TPTOCOMA | TPTOCOMA ntPtoComa
    ;
