
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 15 12:57:19 CET 2019
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 15 12:57:19 CET 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\050\002\000\002\002" +
    "\004\000\002\003\006\000\002\003\004\000\002\004\004" +
    "\000\002\004\002\000\002\005\004\000\002\005\003\000" +
    "\002\006\006\000\002\006\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\004\000\002\010" +
    "\002\000\002\011\004\000\002\011\003\000\002\012\006" +
    "\000\002\012\003\000\002\013\005\000\002\013\003\000" +
    "\002\014\004\000\002\014\003\000\002\015\006\000\002" +
    "\015\003\000\002\016\004\000\002\016\002\000\002\017" +
    "\004\000\002\017\003\000\002\020\006\000\002\020\003" +
    "\000\002\021\003\000\002\021\003\000\002\022\006\000" +
    "\002\022\002\000\002\023\006\000\002\023\003\000\002" +
    "\024\004\000\002\024\005\000\002\024\002\000\002\025" +
    "\005\000\002\025\003\000\002\026\006\000\002\026\003" +
    "\000\002\027\004\000\002\027\002\000\002\027\003\000" +
    "\002\030\005\000\002\030\002\000\002\030\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\004\000\002\031\004\000\002\031\003\000\002\031\003" +
    "\000\002\032\005\000\002\032\007\000\002\041\006\000" +
    "\002\037\007\000\002\040\004\000\002\040\002\000\002" +
    "\033\006\000\002\033\006\000\002\033\003\000\002\034" +
    "\004\000\002\035\006\000\002\035\003\000\002\036\003" +
    "\000\002\036\005\000\002\036\005\000\002\036\007\000" +
    "\002\036\002\000\002\036\003\000\002\042\004\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\005\000\002\042\006\000\002\042\003\000\002" +
    "\043\003\000\002\043\003\000\002\046\003\000\002\046" +
    "\005\000\002\044\010\000\002\044\003\000\002\045\006" +
    "\000\002\045\003\000\002\047\003\000\002\047\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\004\020\000\001\002\000\004\002\256\001" +
    "\002\000\004\020\007\001\002\000\004\002\uffff\001\002" +
    "\000\006\003\010\010\011\001\002\000\004\002\ufffd\001" +
    "\002\000\004\036\013\001\002\000\016\003\015\013\ufffb" +
    "\021\ufffb\031\016\034\ufffb\035\ufffb\001\002\000\044\002" +
    "\uff9f\003\uff9f\010\uff9f\013\uff9f\014\uff9f\015\uff9f\017\uff9f" +
    "\021\uff9f\022\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\031" +
    "\uff9f\034\uff9f\035\uff9f\036\013\001\002\000\042\002\uff9e" +
    "\003\uff9e\010\uff9e\013\uff9e\014\uff9e\015\uff9e\017\uff9e\021" +
    "\uff9e\022\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\031\uff9e" +
    "\034\uff9e\035\uff9e\001\002\000\010\002\uffa2\013\uffa2\021" +
    "\uffa2\001\002\000\006\003\243\010\244\001\002\000\012" +
    "\013\ufff2\021\ufff2\034\022\035\ufff2\001\002\000\004\002" +
    "\ufffe\001\002\000\010\013\uffe6\021\uffe6\035\050\001\002" +
    "\000\006\003\023\010\026\001\002\000\014\003\uffee\010" +
    "\uffee\013\uffee\021\uffee\035\uffee\001\002\000\014\003\023" +
    "\010\026\013\ufff0\021\ufff0\035\ufff0\001\002\000\010\013" +
    "\ufff3\021\ufff3\035\ufff3\001\002\000\004\043\027\001\002" +
    "\000\006\003\031\033\032\001\002\000\004\036\013\001" +
    "\002\000\004\036\uffec\001\002\000\006\003\034\010\036" +
    "\001\002\000\004\014\045\001\002\000\010\003\uffe8\010" +
    "\uffe8\014\uffe8\001\002\000\010\003\034\010\036\014\uffea" +
    "\001\002\000\004\042\037\001\002\000\006\030\042\032" +
    "\040\001\002\000\006\036\uffa7\040\uffa7\001\002\000\004" +
    "\036\013\001\002\000\006\036\uffa6\040\uffa6\001\002\000" +
    "\010\003\uffe9\010\uffe9\014\uffe9\001\002\000\004\014\uffeb" +
    "\001\002\000\004\036\uffed\001\002\000\014\003\uffef\010" +
    "\uffef\013\uffef\021\uffef\035\uffef\001\002\000\010\013\ufff1" +
    "\021\ufff1\035\ufff1\001\002\000\006\003\233\010\100\001" +
    "\002\000\006\013\uffde\021\uffde\001\002\000\006\013\053" +
    "\021\054\001\002\000\024\003\124\010\120\014\uffd0\015" +
    "\125\022\115\024\127\025\123\026\116\027\114\001\002" +
    "\000\006\003\055\010\057\001\002\000\016\003\uffdc\013" +
    "\uffdc\021\uffdc\031\uffdc\034\uffdc\035\uffdc\001\002\000\016" +
    "\003\015\013\ufffb\021\ufffb\031\016\034\ufffb\035\ufffb\001" +
    "\002\000\012\003\uffd9\036\uffd9\037\060\042\uffd9\001\002" +
    "\000\010\003\071\035\070\040\067\001\002\000\010\003" +
    "\063\036\uffd3\042\064\001\002\000\004\036\013\001\002" +
    "\000\004\036\uffd2\001\002\000\006\030\042\032\040\001" +
    "\002\000\004\036\uffd4\001\002\000\016\003\uffdd\013\uffdd" +
    "\021\uffdd\031\uffdd\034\uffdd\035\uffdd\001\002\000\010\003" +
    "\uffdb\036\uffdb\042\uffdb\001\002\000\004\010\100\001\002" +
    "\000\006\036\uffd5\040\uffd5\001\002\000\004\040\076\001" +
    "\002\000\006\036\013\040\uffd7\001\002\000\006\003\071" +
    "\035\070\001\002\000\004\040\uffd8\001\002\000\010\003" +
    "\uffda\036\uffda\042\uffda\001\002\000\004\042\103\001\002" +
    "\000\006\041\101\042\uffa5\001\002\000\004\010\100\001" +
    "\002\000\004\042\uffa4\001\002\000\010\010\106\030\042" +
    "\032\040\001\002\000\006\036\uffd6\040\uffd6\001\002\000" +
    "\006\036\uffe1\040\uffe1\001\002\000\006\036\uffe0\040\uffe0" +
    "\001\002\000\006\013\uffdf\021\uffdf\001\002\000\004\036" +
    "\uffc9\001\002\000\004\014\232\001\002\000\004\036\uffcc" +
    "\001\002\000\004\014\231\001\002\000\004\036\uffbf\001" +
    "\002\000\020\003\133\004\134\005\132\006\131\010\137" +
    "\012\135\037\136\001\002\000\004\037\225\001\002\000" +
    "\004\036\uffcd\001\002\000\012\036\uffbc\037\215\046\214" +
    "\051\216\001\002\000\004\036\uffce\001\002\000\004\036" +
    "\013\001\002\000\004\037\207\001\002\000\014\002\uffa0" +
    "\013\uffa0\014\uffcf\021\uffa0\036\uffc8\001\002\000\020\003" +
    "\133\004\134\005\132\006\131\010\137\012\135\037\136" +
    "\001\002\000\004\014\176\001\002\000\020\003\133\004" +
    "\134\005\132\006\131\010\137\012\135\037\136\001\002" +
    "\000\010\002\uffa3\013\uffa3\021\uffa3\001\002\000\024\011" +
    "\uffae\016\uffae\023\uffae\036\uffae\040\uffae\044\uffae\045\uffae" +
    "\047\uffae\050\uffae\001\002\000\024\011\uffac\016\uffac\023" +
    "\uffac\036\uffac\040\uffac\044\uffac\045\uffac\047\uffac\050\uffac" +
    "\001\002\000\024\011\uffa8\016\uffa8\023\uffa8\036\uffa8\040" +
    "\uffa8\044\uffa8\045\uffa8\047\uffa8\050\uffa8\001\002\000\024" +
    "\011\uffad\016\uffad\023\uffad\036\uffad\040\uffad\044\uffad\045" +
    "\uffad\047\uffad\050\uffad\001\002\000\020\003\133\004\134" +
    "\005\132\006\131\010\137\012\135\037\136\001\002\000" +
    "\020\003\133\004\134\005\132\006\131\010\137\012\135" +
    "\037\136\001\002\000\030\011\uffab\016\uffab\023\uffab\036" +
    "\uffab\037\156\040\uffab\044\uffab\045\uffab\047\uffab\050\uffab" +
    "\051\157\001\002\000\016\011\145\023\146\044\143\045" +
    "\142\047\141\050\144\001\002\000\020\003\133\004\134" +
    "\005\132\006\131\010\137\012\135\037\136\001\002\000" +
    "\020\003\133\004\134\005\132\006\131\010\137\012\135" +
    "\037\136\001\002\000\020\003\133\004\134\005\132\006" +
    "\131\010\137\012\135\037\136\001\002\000\020\003\133" +
    "\004\134\005\132\006\131\010\137\012\135\037\136\001" +
    "\002\000\020\003\133\004\134\005\132\006\131\010\137" +
    "\012\135\037\136\001\002\000\024\003\147\010\120\014" +
    "\uffd0\015\125\022\115\024\127\025\123\026\116\027\114" +
    "\001\002\000\010\014\uffcf\017\uffcf\036\uffc8\001\002\000" +
    "\004\014\uffc5\001\002\000\024\011\uffb1\016\uffb1\023\uffb1" +
    "\036\uffb1\040\uffb1\044\uffb1\045\uffb1\047\uffb1\050\uffb1\001" +
    "\002\000\020\011\145\016\uffaf\023\uffaf\036\uffaf\040\uffaf" +
    "\044\143\045\142\001\002\000\024\011\145\016\uffb2\023" +
    "\uffb2\036\uffb2\040\uffb2\044\uffb2\045\142\047\uffb2\050\uffb2" +
    "\001\002\000\024\011\uffb3\016\uffb3\023\uffb3\036\uffb3\040" +
    "\uffb3\044\uffb3\045\uffb3\047\uffb3\050\uffb3\001\002\000\020" +
    "\011\145\016\uffb0\023\uffb0\036\uffb0\040\uffb0\044\143\045" +
    "\142\001\002\000\010\003\161\010\162\040\uffb7\001\002" +
    "\000\004\010\160\001\002\000\024\011\uffaa\016\uffaa\023" +
    "\uffaa\036\uffaa\040\uffaa\044\uffaa\045\uffaa\047\uffaa\050\uffaa" +
    "\001\002\000\004\040\uffb6\001\002\000\010\040\uffbb\041" +
    "\166\051\165\001\002\000\004\040\164\001\002\000\024" +
    "\011\uffa9\016\uffa9\023\uffa9\036\uffa9\040\uffa9\044\uffa9\045" +
    "\uffa9\047\uffa9\050\uffa9\001\002\000\004\010\170\001\002" +
    "\000\010\003\161\010\162\040\uffb7\001\002\000\004\040" +
    "\uffba\001\002\000\006\040\uffb9\041\171\001\002\000\010" +
    "\003\161\010\162\040\uffb7\001\002\000\004\040\uffb8\001" +
    "\002\000\016\011\145\040\174\044\143\045\142\047\141" +
    "\050\144\001\002\000\024\011\uffb4\016\uffb4\023\uffb4\036" +
    "\uffb4\040\uffb4\044\uffb4\045\uffb4\047\uffb4\050\uffb4\001\002" +
    "\000\024\011\uffb5\016\uffb5\023\uffb5\036\uffb5\040\uffb5\044" +
    "\uffb5\045\uffb5\047\uffb5\050\uffb5\001\002\000\004\010\177" +
    "\001\002\000\004\036\013\001\002\000\010\002\uffa1\013" +
    "\uffa1\021\uffa1\001\002\000\016\011\145\016\202\044\143" +
    "\045\142\047\141\050\144\001\002\000\026\003\147\010" +
    "\120\014\uffd0\015\125\017\uffd0\022\115\024\127\025\123" +
    "\026\116\027\114\001\002\000\006\014\uffc2\017\205\001" +
    "\002\000\004\014\uffc4\001\002\000\024\003\147\010\120" +
    "\014\uffd0\015\125\022\115\024\127\025\123\026\116\027" +
    "\114\001\002\000\004\014\uffc3\001\002\000\004\007\210" +
    "\001\002\000\004\040\211\001\002\000\004\036\uffc1\001" +
    "\002\000\026\003\147\010\120\014\uffd0\015\125\017\uffd0" +
    "\022\115\024\127\025\123\026\116\027\114\001\002\000" +
    "\006\014\uffd1\017\uffd1\001\002\000\020\003\133\004\134" +
    "\005\132\006\131\010\137\012\135\037\136\001\002\000" +
    "\010\003\161\010\162\040\uffb7\001\002\000\004\010\217" +
    "\001\002\000\004\046\220\001\002\000\020\003\133\004" +
    "\134\005\132\006\131\010\137\012\135\037\136\001\002" +
    "\000\016\011\145\036\uffc6\044\143\045\142\047\141\050" +
    "\144\001\002\000\004\040\223\001\002\000\004\036\uffbd" +
    "\001\002\000\016\011\145\036\uffc7\044\143\045\142\047" +
    "\141\050\144\001\002\000\020\003\133\004\134\005\132" +
    "\006\131\010\137\012\135\037\136\001\002\000\016\011" +
    "\145\040\227\044\143\045\142\047\141\050\144\001\002" +
    "\000\004\036\uffc0\001\002\000\016\011\145\036\uffbe\044" +
    "\143\045\142\047\141\050\144\001\002\000\004\036\uffcb" +
    "\001\002\000\004\036\uffca\001\002\000\012\003\uffe2\010" +
    "\uffe2\013\uffe2\021\uffe2\001\002\000\012\003\233\010\100" +
    "\013\uffe4\021\uffe4\001\002\000\004\042\237\001\002\000" +
    "\006\013\uffe7\021\uffe7\001\002\000\010\010\106\030\042" +
    "\032\040\001\002\000\004\036\013\001\002\000\012\003" +
    "\uffe3\010\uffe3\013\uffe3\021\uffe3\001\002\000\006\013\uffe5" +
    "\021\uffe5\001\002\000\016\003\ufff7\010\ufff7\013\ufff7\021" +
    "\ufff7\034\ufff7\035\ufff7\001\002\000\004\043\250\001\002" +
    "\000\012\013\ufffc\021\ufffc\034\ufffc\035\ufffc\001\002\000" +
    "\016\003\243\010\244\013\ufff9\021\ufff9\034\ufff9\035\ufff9" +
    "\001\002\000\012\013\ufffa\021\ufffa\034\ufffa\035\ufffa\001" +
    "\002\000\010\004\254\005\252\006\251\001\002\000\004" +
    "\036\ufff4\001\002\000\004\036\ufff5\001\002\000\004\036" +
    "\013\001\002\000\004\036\ufff6\001\002\000\016\003\ufff8" +
    "\010\ufff8\013\ufff8\021\ufff8\034\ufff8\035\ufff8\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\006\002\003\050\004\001\001\000\002\001" +
    "\001\000\004\003\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\011\001\001\000" +
    "\006\004\016\044\017\001\001\000\004\047\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\244\006" +
    "\245\001\001\000\004\010\020\001\001\000\002\001\001" +
    "\000\004\016\050\001\001\000\006\011\024\012\023\001" +
    "\001\000\002\001\001\000\006\011\046\012\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\027\001" +
    "\001\000\004\047\045\001\001\000\002\001\001\000\006" +
    "\014\032\015\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\043\015\034\001\001\000\002\001\001" +
    "\000\004\043\040\001\001\000\002\001\001\000\004\047" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\235\020\233\046\234\001\001\000\004" +
    "\022\051\001\001\000\002\001\001\000\024\030\125\031" +
    "\121\032\120\033\116\034\111\035\107\037\112\041\110" +
    "\045\127\001\001\000\004\023\055\001\001\000\002\001" +
    "\001\000\006\004\016\044\106\001\001\000\004\024\060" +
    "\001\001\000\006\025\071\026\072\001\001\000\004\027" +
    "\061\001\001\000\004\047\065\001\001\000\002\001\001" +
    "\000\004\043\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\073\001\001\000" +
    "\006\025\074\026\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\101\001\001\000\002\001\001\000\006\021\103\043\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\200" +
    "\001\001\000\002\001\001\000\004\042\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\174\001\001\000" +
    "\004\042\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\154\001\001\000\004\042\153\001\001\000" +
    "\004\042\152\001\001\000\004\042\151\001\001\000\004" +
    "\042\150\001\001\000\022\030\147\031\121\032\120\033" +
    "\116\034\111\035\107\037\112\041\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\030" +
    "\202\031\121\032\120\033\116\034\111\035\107\037\112" +
    "\041\110\001\001\000\004\040\203\001\001\000\002\001" +
    "\001\000\022\030\205\031\121\032\120\033\116\034\111" +
    "\035\107\037\112\041\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\030\212\031\121\032\120\033\116\034\111\035\107\037" +
    "\112\041\110\001\001\000\002\001\001\000\004\042\223" +
    "\001\001\000\004\036\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\241\020\233\046\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\237\043" +
    "\104\001\001\000\004\047\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\246\006\245\001\001\000\002" +
    "\001\001\000\004\007\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ntPtoComa ::= TPTOCOMA ntPtoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ntPtoComa",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ntPtoComa ::= TPTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ntPtoComa",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // finalModulo ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalModulo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // finalModulo ::= sentencias TEND TIDENTIFICADOR ntPtoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalModulo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cuerpoModulo ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoModulo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cuerpoModulo ::= ctes tipos vars subs TBEGIN finalModulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoModulo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // varSeqDeIds ::= TIDENTIFICADOR TCOMA varSeqDeIds 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSeqDeIds",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // varSeqDeIds ::= TIDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSeqDeIds",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipoPrimitivo ::= TBOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipoPrimitivo ::= TINTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= TIDENTIFICADOR TPARI sentCallParams TPARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= TIDENTIFICADOR TPUNTO TIDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= TIDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= TLFALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= TLTRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= TLINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion TDISTINTO expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion TMENOR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion TAND expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion TSUMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion TDIVIDE expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= TPARI expresion TPARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= TNOT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentCallParams ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCallParams",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentCallParams ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCallParams",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentCallParams ::= TIDENTIFICADOR TPUNTO TIDENTIFICADOR TCOMA sentCallParams 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCallParams",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentCallParams ::= TIDENTIFICADOR TPUNTO TIDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCallParams",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentCallParams ::= TIDENTIFICADOR TCOMA sentCallParams 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCallParams",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentCallParams ::= TIDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCallParams",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentCall ::= TIDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCall",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentCall ::= TIDENTIFICADOR TPARI sentCallParams TPARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentCall",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentReturn ::= TRETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentReturn",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentES ::= TWRITELN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentES ::= TWRITEINT TPARI expresion TPARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentES ::= TWRITESTRING TPARI TLSTRING TPARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentElse ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentElse",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentElse ::= TELSE sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentElse",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentIf ::= TIF expresion TTHEN sentencias sentElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentWhile ::= TWHILE expresion TDO sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentWhile",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentAsign ::= TIDENTIFICADOR TPUNTO TIDENTIFICADOR TASSIGN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentAsign",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentAsign ::= TIDENTIFICADOR TASSIGN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentAsign",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sent ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sent ::= sentCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sent ::= sentWhile TEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sent ::= sentIf TEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sent ::= sentReturn 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sent ::= sentES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sent ::= sentAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencias ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencias ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencias ::= sent ntPtoComa sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // subReturn ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subReturn",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // subReturn ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subReturn",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // subReturn ::= TDOSPTS tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subReturn",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // subPar ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subPar",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // subPar ::= TVAR varSeqDeIds TDOSPTS varTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subPar",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // subParamsCuerpo ::= subPar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subParamsCuerpo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // subParamsCuerpo ::= subPar ntPtoComa subParamsCuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subParamsCuerpo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // subParams ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subParams",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // subParams ::= TPARI subParamsCuerpo TPARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subParams",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // subParams ::= TPARI TPARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subParams",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // subDecl ::= error 
            {
              SubDecl RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // subDecl ::= TIDENTIFICADOR subParams subReturn ntPtoComa 
            {
              SubDecl RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subDecl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // subs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subs",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // subs ::= subs TPROCEDURE subDecl cuerpoModulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subs",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // varTipo ::= TIDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // varTipo ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var ::= error 
            {
              Var RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var ::= varSeqDeIds TDOSPTS varTipo ntPtoComa 
            {
              Var RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // varsLista ::= var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsLista",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // varsLista ::= var varsLista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsLista",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vars ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vars ::= TVAR varsLista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // regCampo ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regCampo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // regCampo ::= TIDENTIFICADOR TDOSPTS tipoPrimitivo ntPtoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regCampo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // regCampos ::= regCampo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regCampos",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // regCampos ::= regCampo regCampos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regCampos",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // registro ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("registro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // registro ::= TRECORD regCampos TEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("registro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= error 
            {
              Tipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= TIDENTIFICADOR TIGUAL registro ntPtoComa 
            {
              Tipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tiposLista ::= tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiposLista",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tiposLista ::= tipo tiposLista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiposLista",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipos ::= TTYPE tiposLista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cteValor ::= TLINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cteValor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cteValor ::= TLFALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cteValor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cteValor ::= TLTRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cteValor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cte ::= error 
            {
              Cte RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cte",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cte ::= TIDENTIFICADOR TIGUAL cteValor ntPtoComa 
            {
              Cte RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cte",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ctesLista ::= cte 
            {
              Object RESULT =null;
		 Cte c = new Cte(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctesLista",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ctesLista ::= cte ctesLista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctesLista",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ctes ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ctes ::= TCONST ctesLista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= TMODULE error 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= TMODULE TIDENTIFICADOR ntPtoComa cuerpoModulo 
            {
              Axiom RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println(id.getLexema()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
	
	
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

